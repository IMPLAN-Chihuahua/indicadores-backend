const express = require('express');
const router = express.Router();
const { getUsers, createUser, getUser, editUser } = require('../controllers/usuarioController');
const { verifyJWT } = require('../middlewares/auth');
const {
    registerValidationRules,
    paginationValidationRules,
    validate } = require('../middlewares/validator');
/**
 * @swagger
 *   components:
 *     schemas:
 *       Usuario:
 *         type: object
 *         required:
 *           - correo
 *           - clave
 *           - nombres
 *           - apellidoPaterno
 *         properties:
 *           id:
 *             type: integer
 *             description: autogenerated id of the user
 *             example: 1
 *             readOnly: true
 *           correo:
 *             type: string
 *             example: johndoe@email.com
 *             description: email address of a user
 *           clave:
 *             type: string
 *             description: password
 *             example: 2JE-WdnS
 *             writeOnly: true
 *           nombres:
 *             type: string
 *             example: John
 *             description: user's first name (s)
 *           apellidoPaterno:
 *             type: string
 *             example: Doe
 *             description: user's last name
 *           apellidoMaterno:
 *             type: string
 *             nullable: true
 *             example: Smith
 *             description: user's second last name
 *           avatar:
 *             type: string
 *             description: user's profile picture
 *           activo:
 *             type: string
 *             example: SI
 *             description: is user active?
 *           idRol:
 *             type: int
 *             example: 1
 *             description: user's rol
 *           createAt:
 *             type: string
 *             example: 2021-12-04T22:22:33.836Z
 *             description: creation date of a user
 *             readOnly: true
 *           updatedAt:
 *             type: string
 *             example: 2021-12-04T22:22:33.836Z
 *             description: update date of a user
 *             readOnly: true 
 */


/**
 * @swagger
 *   /usuarios:
 *     get:
 *       summary: Retrieve a list of users
 *       description: Retrieve a list of users with pagination
 *       tags: [Usuarios]
 *       security:
 *         - bearer: []
 *       parameters:
 *         - in: query
 *           name: page
 *           required: false
 *           schema:
 *             type: integer
 *           description: the page number
 *           example: 1
 *         - in: query
 *           name: per_page
 *           required: false
 *           schema:
 *             type: integer
 *           description: number of usuarios in the data array result
 *           example: 25
 *       responses: 
 *         200:
 *           description: A list of users
 *           content:
 *             application/json:
 *               schema: 
 *                 type: object
 *                 properties:
 *                   page:
 *                     type: integer
 *                     example: 1
 *                     description: page number
 *                   per_page:
 *                     type: integer
 *                     example: 25
 *                     description: items per page
 *                   total:
 *                     type: integer
 *                     description: total number of usuarios
 *                   total_pages:
 *                     type: integer
 *                     description: total number of pages with per_page elements
 *                   data:
 *                     type: array
 *                     items: 
 *                       $ref: '#/components/schemas/Usuario'
 *                     description: list of users                    
 *                 
 *         401:
 *           description: Unauthorized request (not valid JWT in Authorization header)
 *         403:
 *           description: The request has an invalid or expired token
 *         422:
 *           description: Unable to process request due to semantic errors in the body or param payload
 *       
 */
router.get('/', verifyJWT, paginationValidationRules(), validate, getUsers);

/**
 * @swagger
 *   /usuarios:
 *     post:
 *       summary: Register new user
 *       tags: [Usuarios]
 *       requestBody: 
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Usuario'
 *       responses: 
 *         201:
 *           description: Account created successfully 
 *         403:
 *           description: Unable to create account (email is already in use)
 *         422:
 *           description: Unable to process request due to semantic errors in the body or param payload
 */
router.post('/', registerValidationRules(), validate, createUser);


/**
 * @swagger
 *  /usuarios/{id}:
 *    get:
 *      summary: Get a user with a given id
 *      tags: [Usuarios]
 *      security:
 *        - bearer: []
 *      parameters:
 *        - in: path
 *          name: id
 *          required: true
 *          schema: 
 *            type: integer
 *          style: simple
 *      responses: 
 *        200:
 *          description: Information of a user
 *        204:
 *          description: Not user was found with the given id
 *        401:
 *          description: Unauthorized request (not valid JWT in Authorization header)
 *        403:
 *          description: The request has an invalid or expired token
 *        422:
 *          description: Unable to process request due to semantic errors in the body or param payload
 */
router.get('/:id', verifyJWT, getUser);


/**
 * @swagger
 *  /usuarios/{id}:
 *    patch:
 *      summary: Update user's information
 *      tags: [Usuarios]
 *      security:
 *        - bearer: []
 *      parameters:
 *        - in: path
 *          name: id
 *          required: true
 *          schema:
 *              type: integer
 *      requestBody: 
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Usuario'
 *      responses:
 *        204:
 *          description: User information was updated successfully
 *        401:
 *          description: Unauthorized request (not valid JWT in Authorization header)
 *        403:
 *          description: The request has an invalid or expired token
 *        422:
 *          description: Unable to process request due to semantic errors in the body or param payload
 */
router.patch('/:id', verifyJWT, editUser);

module.exports = router;