const express = require('express');
const { query } = require('express-validator');

const router = express.Router();
const { getUsers,
    createUser,
    getUserFromId,
    editUser,
    editUserStatus,
    setIndicadoresToUsuario } = require('../controllers/usuarioController');
const { verifyJWT, verifyUserHasRoles, verifyUserIsActive } = require('../middlewares/auth');
const { uploadImage } = require('../middlewares/fileUpload');
const {
    registerValidationRules,
    paginationValidationRules,
    validate,
    paramValidationRules,
    updateValidationRules,
    usuarioAssignIndicadorValidationRules,
    desdeHastaDateRangeValidationRules } = require('../middlewares/validator');


/**
 * @swagger
 *   components:
 *     schemas:
 *       Usuario:
 *         type: object
 *         required:
 *           - correo
 *           - clave
 *           - nombres
 *           - apellidoPaterno
 *         properties:
 *           id:
 *             type: integer
 *             example: 1
 *             description: Autogenerated id
 *             readOnly: true
 *           correo:
 *             type: string
 *             example: johndoe@email.com
 *             description: Email address
 *           clave:
 *             type: string
 *             description: Password
 *             writeOnly: true
 *           nombres:
 *             type: string
 *             example: John
 *             description: First name
 *           apellidoPaterno:
 *             type: string
 *             example: Doe
 *             description: First lastname
 *           apellidoMaterno:
 *             type: string
 *             description: Second lastname
 *           urlImagen:
 *             type: string
 *             description: Profile picture
 *           activo:
 *             type: string
 *             example: SI
 *             description: Is user active?
 *           idRol:
 *             type: int
 *             example: 1
 *             description: Id of given rol
 *           createAt:
 *             type: string
 *             description: Timestamp of creation in 'Z time'
 *             readOnly: true
 *           updatedAt:
 *             type: string
 *             description: Timestamp of latest update in 'Z time'
 *             readOnly: true 
 */

/**
 * @swagger
 *   components:
 *     schemas:
 *       BasicError:
 *         type: object
 *         properties:
 *           status:
 *             type: integer
 *             minimum: 400
 *             maximum: 599
 *             description: HTTP status code
 *           message:
 *             type: string
 *             description: Short message with cause of the error
 */         


/**
 * @swagger
 *   /usuarios:
 *     get:
 *       summary: List of users
 *       description: Retrieve a list of users
 *       tags: [Usuarios]
 *       security:
 *         - bearer: []
 *       parameters:
 *         - in: query
 *           name: page
 *           required: false
 *           schema:
 *             type: integer
 *           example: 1
 *         - in: query
 *           name: perPage
 *           required: false
 *           schema:
 *             type: integer
 *           example: 25
 *       responses: 
 *         200:
 *           description: A list of users
 *           content:
 *             application/json:
 *               schema: 
 *                 type: object
 *                 properties:
 *                   page:
 *                     type: integer
 *                     example: 1
 *                   perPage:
 *                     type: integer
 *                     example: 25
 *                   total:
 *                     type: integer
 *                   totalPages:
 *                     type: integer
 *                   data:
 *                     type: array
 *                     items: 
 *                       $ref: '#/components/schemas/Usuario'
 *         401:
 *           description: Unauthorized
 *           content:
 *             aplication/json:
 *               type: object
 *               schema:
 *                 $ref: '#/components/schemas/BasicError'
 *               example:
 *                 status: 401
 *                 message: This response requires authentication
 *         403:
 *           description: Forbidden
 *           content:
 *             aplication/json:
 *               type: object
 *               schema:
 *                 $ref: '#/components/schemas/BasicError'
 *               example:
 *                 status: 403
 *                 message: User has no access to this resource
 *         422:
 *           description: Validation failed
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   status:
 *                     type: integer
 *                     example: 422
 *                   errors:
 *                     type: array
 *                     items:
 *                       type: string
 *                       example: 'query[page]: Field must be an integer number'
 *         429:
 *           description: Too many request were made in a short time, making the app exceed its rate limit
 *           content:
 *             aplication/json:
 *               type: object
 *               schema:
 *                 $ref: '#/components/schemas/BasicError'
 *               example:
 *                 status: 429
 *                 message: Too many requests, please try again later
 */
router.get(
    '/',
    verifyJWT,
    verifyUserIsActive,
    verifyUserHasRoles(['ADMIN']),
    paginationValidationRules(),
    query('searchQuery'),
    validate,
    getUsers
);

/**
 * @swagger
 *   /usuarios:
 *     post:
 *       summary: Create user
 *       description: A user with ADMIN rol can register new users
 *       tags: [Usuarios]
 *       security:
 *         - bearer: []
 *       requestBody: 
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Usuario'
 *       responses: 
 *         201:
 *           description: Created user
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   data:
 *                     type: object
 *                     $ref: '#/components/schemas/Usuario'
 *         403:
 *           description: Forbidden
 *           content:
 *             aplication/json:
 *               type: object
 *               schema:
 *                 $ref: '#/components/schemas/BasicError'
 *               example:
 *                 status: 403
 *                 message: User has no access to this resource
 *         409:
 *           description: Conflict
 *           content:
 *             application/json:
 *               type: object
 *               schema:
 *                   $ref: '#/components/schemas/BasicError'
 *               example:
 *                 status: 409
 *                 message: Email address is already in use 
 *         422:
 *           description: Validation failed
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   status:
 *                     type: integer
 *                     example: 422
 *                   errors:
 *                     type: array
 *                     items:
 *                       type: string
 *                       example: 'body[correo]: Field must be a valid email address'
 *         429:
 *           description: Too many request were made in a short time, making the app exceed its rate limit
 *           content:
 *             aplication/json:
 *               type: object
 *               schema:
 *                 $ref: '#/components/schemas/BasicError'
 *               example:
 *                 status: 429
 *                 message: Too many requests, please try again later
 */
router.post(
    '/',
    verifyJWT,
    verifyUserIsActive,
    verifyUserHasRoles(['ADMIN']),
    uploadImage('usuarios'),
    registerValidationRules(),
    validate,
    createUser
);


/**
 * @swagger
 *  /usuarios/{idUsuario}:
 *    get:
 *      summary: Get information about a user
 *      description: Retrieve user with given id
 *      tags: [Usuarios]
 *      security:
 *        - bearer: []
 *      parameters:
 *        - in: path
 *          name: idUser
 *          required: true
 *          schema: 
 *            type: integer
 *          style: simple
 *      responses: 
 *        200:
 *          description: A user
 *        204:
 *          description: User with given id was not found
 *        401:
 *          description: Unauthorized
 *        403:
 *          description: Forbidden
 *        422:
 *          description: Validation failed
 *          content:
 *            application/json:
 *              schema:
 *                type: object
 *                properties:
 *                  status:
 *                    type: integer
 *                    example: 422
 *                  errors:
 *                    type: array
 *                    items:
 *                      type: string
 *                      example: 'param[idUsuario]: Field must be an integer number'
 */
router.get(
    '/:idUser',
    verifyJWT,
    verifyUserIsActive,
    verifyUserHasRoles(['ADMIN']),
    paramValidationRules(),
    validate,
    getUserFromId
);


/**
 * @swagger
 *  /usuarios/{idUsuario}:
 *    patch:
 *      summary: Update user's information
 *      tags: [Usuarios]
 *      security:
 *        - bearer: []
 *      parameters:
 *        - in: path
 *          name: idUser
 *          required: true
 *          schema:
 *              type: integer
 *      requestBody: 
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Usuario'
 *      responses:
 *        204:
 *          description: User information was updated successfully
 *        401:
 *          description: Unauthorized
 *        403:
 *          description: Forbidden
 *        422:
 *          description: Unable to process request due to semantic errors in the body or param payload
 */
router.patch(
    '/:idUser',
    verifyJWT,
    verifyUserIsActive,
    verifyUserHasRoles(['ADMIN']),
    paramValidationRules(),
    updateValidationRules(),
    validate,
    uploadImage('usuarios'),
    editUser
);


/**
 * @swagger
 *  /usuarios/{idUsuario}/toggle-status:
 *  patch:
 *    summary: Update status of user (if it was active changes to inactive)
 *    tags: [Usuarios]
 *    security:
 *      - bearer: []
 *    parameters:
 *      - in: path
 *        name: idUser
 *        required: true
 *        schema:
 *          type: integer
 *    responses:
 *      204:
 *        description: User status changed successfully
 *      401:
 *        description: Unauthorized request (not valid JWT in Authorization header)
 *      403:
 *        description: The request has an invalid token, rol or privileges (inactive account)
 */
router.patch(
    '/:idUser/toggle-status',
    verifyJWT,
    verifyUserIsActive,
    verifyUserHasRoles(['ADMIN']),
    paramValidationRules(),
    validate,
    editUserStatus
);


/**
 * @swagger
 *   /usuarios/{idUser}/indicadores:
 *     post:
 *       summary: Assign indicadores to a user
 *       tags: [Usuarios]
 *       security:
 *         - bearer: []
 *       parameters:
 *         - in: path
 *           name: idIndicador
 *           required: true
 *           schema: 
 *             type: integer
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:    
 *                 indicadores:
 *                   type: array
 *                   items:
 *                     type: integer
 *                   example: [1, 2, 3, 4, 5]
 *                 desde:
 *                   type: string   
 *                   example: 2022-05-09
 *                 hasta:
 *                   type: string
 *                   example: 2022-05-10
 *       responses:
 *         201:
 *           description: Operations was successful (indicadores are assigned to an usuario)
 *         401:
 *           description: Unauthorized request (not valid JWT in Authorization header)
 *         403:   
 *           description: The request has an invalid token, rol, privileges or account is inactive
 *         429:
 *           description: Too many request were made in a short time, making the app exceed its rate limit
 *           content:
 *             aplication/json:
 *               type: object
 *               schema:
 *                 $ref: '#/components/schemas/BasicError'
 *               example:
 *                 status: 429
 *                 message: Too many requests, please try again later
 */
router.post('/:idUser/indicadores',
    verifyJWT,
    verifyUserIsActive,
    verifyUserHasRoles(['ADMIN']),
    usuarioAssignIndicadorValidationRules(),
    desdeHastaDateRangeValidationRules(),
    paramValidationRules(),
    validate,
    setIndicadoresToUsuario,
);

router.get('/:idUser/profile',
    paramValidationRules(),
    validate,
    getUserFromId
)


module.exports = router;