const express = require('express');
const { updateVariable, deleteVariable } = require('../controllers/variableController');
const { verifyUserIsActive, verifyUserHasRoles, verifyJWT } = require('../middlewares/auth');
const { exists } = require('../middlewares/resourceExists');
const { idValidation, validate } = require('../middlewares/validator/generalValidator');
const { updateVariableValidationRules } = require('../middlewares/validator/variableValidator');

const promisedRouter = require('express-promise-router');
const router = promisedRouter();

// PROTECTED ROUTES
router.use(verifyJWT)
router.use(verifyUserIsActive)
router.use(verifyUserHasRoles(['ADMIN', 'USER']),)

/**
 * @swagger
 *   components:
 *     schemas:
 *       Variable:
 *         type: object
 *         properties:
 *           id:
 *             type: integer
 *             readOnly: true
 *             description: Autogenerated id.
 *             example: 1
 *           nombre:
 *             type: string
 *             description: Name.
 *           descripcion:
 *             type: string 
 *             description: Description.
 *           dato:
 *             type: string
 *             description: Value.
 *             example: 42
 *           anio:
 *             type: integer
 *             description: Year.
 *             example: 2022
 *           idUnidad:
 *             type: integer
 *             writeOnly: true
 *             description: Identifier of the unit of measurement.
 *             example: 1
 *           idFormula:
 *             type: integer
 *             readOnly: true
 *             description: Identifier of the formula this variable belongs to.
 *             example: 1
 */

/**
 * @swagger
 *   /variables:
 *     patch:
 *       summary: Update a variable with a given id
 *       tags: [Variables]
 *       security:
 *         - bearer: []
 *       parameters:
 *         - name: idVariable
 *           in: path
 *           required: true
 *           schema:
 *             type: integer
 *             format: int64
 *             minimum: 1
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Variable'
 *       responses:
 *         204:
 *           description: Variable updated successfully
 *         400:
 *           description: Variable could not be updated
 *         401:
 *           $ref: '#/components/responses/Unauthorized'
 *         404:
 *           $ref: '#/components/responses/NotFound'
 *         422:
 *           $ref: '#/components/responses/UnprocessableEntity'
 *         429:
 *           $ref: '#/components/responses/TooManyRequests'
 *         500:
 *           $ref: '#/components/responses/InternalServerError'
 *         
 */
router.route('/:idVariable')
  .patch(
    idValidation(),
    updateVariableValidationRules(),
    validate,
    exists('idVariable', 'Variable'),
    updateVariable
  );


/**
 * @swagger
 *   /variables:
 *     delete:
 *       summary: Delete a variable
 *       tags: [Variables]
 *       security:
 *         - bearer: []
 *       parameters:
 *         - name: idVariable
 *           in: path
 *           required: true
 *           schema:
 *             type: integer
 *             format: int64
 *             minimum: 1
 *       responses:
 *         204:
 *           description: Variable deteled
 *         400:
 *           description: Variable was not deleted
 *         401:
 *           $ref: '#/components/responses/Unauthorized'
 *         403:
 *           $ref: '#/components/responses/Forbidden'
 *         404:
 *           $ref: '#/components/responses/NotFound'
 *         422:
 *           $ref: '#/components/responses/UnprocessableEntity'
 *         429:
 *           $ref: '#/components/responses/TooManyRequests'
 *         500:
 *           $ref: '#/components/responses/InternalServerError'
 */
router.route('/:idVariable')
  .delete(
    idValidation(),
    validate,
    exists('idVariable', 'Variable'),
    deleteVariable
  );

module.exports = router;