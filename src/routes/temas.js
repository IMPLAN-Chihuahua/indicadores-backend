const express = require('express');
const temaRouter = express.Router();
const { getTemas, createTema, editTema, updateTemaStatus, getTema } = require('../controllers/temaController');
const { getIndicadores, getRandomIndicador } = require('../controllers/indicadorController');
const {
    filterIndicadoresValidationRules,
    sortValidationRules,
} = require('../middlewares/validator/indicadorValidator')
const {
    paginationValidationRules,
    paramValidationRules,
    validate,
    generalFilterOptions,
    generalSortValidationRules,
} = require('../middlewares/validator/generalValidator')
const {
    createTemaValidationRules,
    updateTemaValidationRules,
} = require('../middlewares/validator/temaValidator')
const { verifyJWT, verifyUserIsActive, verifyUserHasRoles } = require('../middlewares/auth');
const { uploadImage } = require('../middlewares/fileUpload');
const { determinePathway, SITE_PATH, determineModel } = require('../middlewares/determinePathway');
const { exists } = require('../middlewares/resourceExists');
const { DESTINATIONS } = require('../services/fileService');
const { getInformation } = require('../controllers/generalController');


const moduloRouter = express.Router();
const indicadorRouter = express.Router({ mergeParams: true });

/**
 * @swagger
 *   components:
 *     schemas:
 *       Tema:
 *         type: object
 *         properties:
 *           id:
 *             type: integer
 *             description: Autogenerated id.
 *             example: 1
 *             readOnly: true
 *           temaIndicador:
 *             type: string
 *             description: Topic name.
 *             example: Indicador de accesibilidad ciclista
 *           codigo:
 *             type: string
 *             description: Code.
 *             example: 'MPO201'
 *           observaciones:
 *             type: string
 *             description: Observations, comments or remarks.
 *             example: Tema de accesibilidad ciclista, definido por la norma ISO/IEC 9126-1:2015
 *           activo:
 *             $ref: '#/components/schemas/Status'
 *           urlImagen:
 *             type: string
 *             format: binary
 *             description: Image URL.
 *             example: http://example.com/image.png
 *           color:
 *             type: string
 *             description: Representative hexadecimal color.
 *             example: '#d2d2d2'
 *           createdAt:
 *             type: string
 *             description: Timestamp of creation in 'Z time'.
 *             format: date-time
 *             readOnly: true
 */
temaRouter.use('/:idTema/indicadores', indicadorRouter);


/**
 * @swagger
 *   /temas:
 *     get:
 *       summary: Retrieves a list of modules
 *       description: Retrieves a list of modules from the database
 *       tags: [Temas]
 *       responses:
 *         200:
 *           description: List of topics (temas).
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   data:
 *                     type: array
 *                     items:
 *                       $ref: '#/components/schemas/Tema'
 *                     description: List of modules
 *         429:
 *           $ref: '#/components/responses/TooManyRequests'
 *         500:
 *           $ref: '#/components/responses/InternalServerError'
 */
temaRouter.route('/')
    .get(getTemas);


/**
 * @swagger
 *   /temas/{idTema}/indicadores:
 *     get:
 *       summary: Retrieves a list of indicadores after validation
 *       description: Retrieves a list of indicadores from the database after pagination validation
 *       tags: [Temas]
 *       parameters:
 *         - name: idTema
 *           in: path
 *           required: true
 *           schema:
 *             type: integer
 *             format: int64
 *             minimum: 1
 *             description: Identifier of a module
 *         - name: page
 *           in: query
 *           required: false
 *           schema:
 *             type: integer
 *             format: int64
 *             minimum: 1
 *             description: Page number
 *         - name: perPage
 *           in: query
 *           required: false
 *           schema:
 *             type: integer
 *             format: int64
 *             minimum: 1
 *             description: Number of elements per page
 *         - name: idOds
 *           in: query
 *           required: false
 *           schema:
 *             type: integer
 *             format: int64
 *             description: Identifier of an ODS
 *         - name: idCobertura
 *           in: query
 *           required: false
 *           schema:
 *             type: integer
 *             format: int64
 *             description: Identifier of an coverage
*         - name: idUnidadMedida
 *           in: query
 *           required: false
 *           schema:
 *             type: integer
 *             format: int64
 *             description: Identifier of an unit of measure
 *         - name: anioUltimoValorDisponible
 *           in: query
 *           required: false
 *           schema:
 *             type: integer
 *             format: int64
 *             description: Identifier of an year
 *         - name: tendenciaActual
 *           in: query
 *           required: false
 *           schema:
 *             type: string
 *             format: string
 *             description: Identifier of an trend
 *         - in: query
 *           name: searchQuery
 *           required: false
 *           schema:
 *             type: string
 *       responses:
 *         200:
 *           description: A list of indicadores.
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   data:
 *                     type: array
 *                     items:
 *                       $ref: '#/components/schemas/Indicador'
 *         404:
 *           $ref: '#/components/responses/NotFound'
 *         422:
 *           $ref: '#/components/responses/UnprocessableEntity'
 *         429:
 *           $ref: '#/components/responses/TooManyRequests'
 *         500:
 *           $ref: '#/components/responses/InternalServerError'
 *
 */
// TODO: Validate tema is active
indicadorRouter.route('/')
    .get(
        paramValidationRules(),
        paginationValidationRules(),
        filterIndicadoresValidationRules(),
        sortValidationRules(),
        validate,
        exists('idTema', 'Tema'),
        determinePathway(SITE_PATH),
        getIndicadores
    );


/**
 * @swagger
 * /temas:
 *   post:
 *     summary: Creates a new module
 *     tags: [Temas]
 *     security:
 *       - bearer: []
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Tema'
 *         multipart/form-data:
 *           schema:
 *             $ref: '#/components/schemas/Tema'
 *     responses:
 *       201:
 *         description: Module created successfully.
 *       409:
 *         description: Unable to create new Tema (temaIndicador is already in use).
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/BasicError'
 *             example:
 *               status: 409
 *               message: temaIndicador is already in use
 *       401:
 *         $ref: '#components/responses/Unauthorized'
 *       403:
 *         $ref: '#components/responses/Forbidden'
 *       422:
 *         $ref: '#components/responses/UnprocessableEntity'
 *       429:
 *         $ref: '#components/responses/TooManyRequests'
 *       500:
 *         $ref: '#components/responses/InternalServerError'
 */

temaRouter.route('/')
    .post(
        verifyJWT,
        verifyUserIsActive,
        verifyUserHasRoles(['ADMIN']),
        uploadImage(DESTINATIONS.TEMASS),
        createTemaValidationRules(),
        validate,
        createTema
    );


/**
 * @swagger
 *   /temas/{idTema}:
 *     put:
 *      summary: Updates a module with given parameters
 *      tags: [Temas]
 *      parameters:
 *        - name: idTema
 *          in: path
 *          required: true
 *          schema:
 *            type: integer
 *            format: int64
 *            minimum: 1
 *            description: Identifier of a module
 *      security:
 *        - bearer: []
 *      requestBody:
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Tema'
 *      responses:
 *        204:
 *          description: Module updated successfully
 *        401:
 *          $ref: '#components/responses/Unauthorized'
 *        403:
 *          $ref: '#components/responses/Forbidden'
 *        422:
 *          $ref: '#components/responses/UnprocessableEntity'
 *        429:
 *          $ref: '#components/responses/TooManyRequests'
 *        500:
 *          $ref: '#components/responses/InternalServerError'
 *
 */

temaRouter.route('/:idTema')
    .put(
        verifyJWT,
        verifyUserIsActive,
        verifyUserHasRoles(['ADMIN']),
        uploadImage(DESTINATIONS.TEMASS),
        updateTemaValidationRules(),
        validate,
        exists('idTema', 'Tema'),
        editTema
    );


/**
 * @swagger
 *   /temas/{idTema}/toggle-status:
 *     post:
 *       summary: Toggles the status of a tema (active/inactive)
 *       description: Update tema status, if it is active it will change to inactive.
 *       tags: [Temas]
 *       security:
 *         - bearer: []
 *       parameters:
 *         - name: idTema
 *           in: path
 *           required: true
 *           schema:
 *             type: integer
 *             format: int64
 *             minimum: 1
 *             description: Identifier of a module
 *       responses:
 *         204:
 *           description: Module status updated successfully
 *         401:
 *           $ref: '#components/responses/Unauthorized'
 *         403:
 *           $ref: '#components/responses/Forbidden'
 *         422:
 *           $ref: '#components/responses/UnprocessableEntity'
 *         429:
 *           $ref: '#components/responses/TooManyRequests'
 *         500:
 *           $ref: '#components/responses/InternalServerError'
 */

temaRouter.route('/:idTema/toggle-status')
    .post(
        verifyJWT,
        verifyUserIsActive,
        verifyUserHasRoles(['ADMIN']),
        paramValidationRules(),
        validate,
        updateTemaStatus
    );


/**
 * @swagger
 *   /temas/{idTema}:
 *     get:
 *       summary: Retrieves information about a tema (Tema)
 *       tags: [Temas]
 *       parameters:
 *         - name: idTema
 *           in: path
 *           required: true
 *           schema:
 *             type: integer
 *             format: int64
 *             minimum: 1
 *             description: Identifier of a Tema
 *       responses:
 *         200:
 *           description: A Tema object with public fields
 *         404:
 *           $ref: '#components/responses/NotFound'
 *         422:
 *           $ref: '#components/responses/UnprocessableEntity'
 *         429:
 *           $ref: '#components/responses/TooManyRequests'
 *         500:
 *           $ref: '#components/responses/InternalServerError'
 */
temaRouter.route('/:idTema')
    .get(
        paramValidationRules(),
        validate,
        getTema
    );


/**
 * @swagger
 *   /temas/info/general:
 *     get:
 *       summary: Retrieve general information about Temas.
 *       tags: [Temas]
 *       parameters:
 *         - in: query
 *           name: page
 *           schema:
 *             type: integer
 *         - in: query
 *           name: perPage
 *           schema:
 *             type: integer
 *         - in: query
 *           name: id
 *           schema:
 *             type: integer
 *         - in: query
 *           name: sortBy
 *           schema:
 *             type: string
 *         - in: query
 *           name: order
 *           schema:
 *             type: string
 *             enum: [asc, desc]
 *         - in: query
 *           name: attributes
 *           schema:
 *             type: array
 *       security:
 *         - bearer: []
 *       responses:
 *         200:
 *           description: General information about Temas.
 *           content:
 *             application/json:
 *               schema:
 *                 $ref: '#/components/schemas/Tema'
 *         401:
 *           $ref: '#/components/responses/Unauthorized'
 *         403:
 *           $ref: '#/components/responses/Forbidden'
 *         404:
 *           $ref: '#/components/responses/NotFound'
 *         422:
 *           $ref: '#components/responses/UnprocessableEntity'
 *         429:
 *           $ref: '#components/responses/TooManyRequests'
 *         500:
 *           $ref: '#components/responses/InternalServerError'
 */
temaRouter
    .route('/info/general')
    .get(
        verifyJWT,
        verifyUserIsActive,
        verifyUserHasRoles(['USER', 'ADMIN']),
        determineModel,
        generalFilterOptions(),
        paramValidationRules(),
        paginationValidationRules(),
        generalSortValidationRules(),
        validate,
        getInformation,
    )


temaRouter.route('/:idTema/randomIndicador')
    .get(
        paramValidationRules(),
        validate,
        determinePathway(SITE_PATH),
        getRandomIndicador
    )


module.exports = temaRouter;